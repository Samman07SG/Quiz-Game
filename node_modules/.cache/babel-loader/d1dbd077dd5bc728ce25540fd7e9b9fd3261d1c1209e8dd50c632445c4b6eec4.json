{"ast":null,"code":"// Open Trivia DB API configuration\nconst API_BASE_URL = 'https://opentdb.com/api.php';\nconst CATEGORIES = {\n  'general': 9,\n  'books': 10,\n  'film': 11,\n  'music': 12,\n  'musicals': 13,\n  'television': 14,\n  'video_games': 15,\n  'board_games': 16,\n  'science_nature': 17,\n  'science_computers': 18,\n  'science_mathematics': 19,\n  'mythology': 20,\n  'sports': 21,\n  'geography': 22,\n  'history': 23,\n  'politics': 24,\n  'art': 25,\n  'celebrities': 26,\n  'animals': 27,\n  'vehicles': 28,\n  'comics': 29,\n  'science_gadgets': 30,\n  'anime_manga': 31,\n  'cartoon_animation': 32\n};\nconst DIFFICULTY_LEVELS = {\n  'easy': 'easy',\n  'medium': 'medium',\n  'hard': 'hard'\n};\n\n// Fallback questions for offline mode\nconst FALLBACK_QUESTIONS = {\n  general: [{\n    question: \"What is the capital of France?\",\n    correct_answer: \"Paris\",\n    incorrect_answers: [\"London\", \"Berlin\", \"Madrid\"],\n    category: \"Geography\",\n    difficulty: \"easy\",\n    type: \"multiple\"\n  }, {\n    question: \"Which planet is known as the Red Planet?\",\n    correct_answer: \"Mars\",\n    incorrect_answers: [\"Venus\", \"Jupiter\", \"Saturn\"],\n    category: \"Science\",\n    difficulty: \"easy\",\n    type: \"multiple\"\n  }, {\n    question: \"Who painted the Mona Lisa?\",\n    correct_answer: \"Leonardo da Vinci\",\n    incorrect_answers: [\"Pablo Picasso\", \"Vincent van Gogh\", \"Michelangelo\"],\n    category: \"Art\",\n    difficulty: \"medium\",\n    type: \"multiple\"\n  }, {\n    question: \"What is the largest mammal in the world?\",\n    correct_answer: \"Blue whale\",\n    incorrect_answers: [\"African elephant\", \"Giraffe\", \"Hippopotamus\"],\n    category: \"Science\",\n    difficulty: \"easy\",\n    type: \"multiple\"\n  }, {\n    question: \"In which year did World War II end?\",\n    correct_answer: \"1945\",\n    incorrect_answers: [\"1944\", \"1946\", \"1947\"],\n    category: \"History\",\n    difficulty: \"medium\",\n    type: \"multiple\"\n  }],\n  science: [{\n    question: \"What is the chemical symbol for gold?\",\n    correct_answer: \"Au\",\n    incorrect_answers: [\"Go\", \"Gd\", \"Ag\"],\n    category: \"Science\",\n    difficulty: \"medium\",\n    type: \"multiple\"\n  }, {\n    question: \"What is the speed of light in vacuum?\",\n    correct_answer: \"299,792,458 m/s\",\n    incorrect_answers: [\"300,000,000 m/s\", \"299,000,000 m/s\", \"301,000,000 m/s\"],\n    category: \"Science\",\n    difficulty: \"hard\",\n    type: \"multiple\"\n  }, {\n    question: \"What is the smallest unit of matter?\",\n    correct_answer: \"Atom\",\n    incorrect_answers: [\"Molecule\", \"Cell\", \"Particle\"],\n    category: \"Science\",\n    difficulty: \"easy\",\n    type: \"multiple\"\n  }, {\n    question: \"What gas makes up most of Earth's atmosphere?\",\n    correct_answer: \"Nitrogen\",\n    incorrect_answers: [\"Oxygen\", \"Carbon dioxide\", \"Argon\"],\n    category: \"Science\",\n    difficulty: \"medium\",\n    type: \"multiple\"\n  }, {\n    question: \"What is the powerhouse of the cell?\",\n    correct_answer: \"Mitochondria\",\n    incorrect_answers: [\"Nucleus\", \"Ribosome\", \"Chloroplast\"],\n    category: \"Science\",\n    difficulty: \"medium\",\n    type: \"multiple\"\n  }]\n};\n\n// Utility function to decode HTML entities\nconst decodeHtml = html => {\n  const txt = document.createElement('textarea');\n  txt.innerHTML = html;\n  return txt.value;\n};\n\n// Utility function to shuffle array\nconst shuffleArray = array => {\n  const shuffled = [...array];\n  for (let i = shuffled.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];\n  }\n  return shuffled;\n};\n\n// Normalize question data from API\nconst normalizeQuestion = question => {\n  const answers = shuffleArray([question.correct_answer, ...question.incorrect_answers]);\n  return {\n    ...question,\n    question: decodeHtml(question.question),\n    correct_answer: decodeHtml(question.correct_answer),\n    incorrect_answers: question.incorrect_answers.map(decodeHtml),\n    answers: answers.map(decodeHtml),\n    category: decodeHtml(question.category),\n    difficulty: question.difficulty\n  };\n};\n\n// Fetch questions from Open Trivia DB API\nexport const fetchQuestions = async (category = 'general', difficulty = 'medium', amount = 10) => {\n  try {\n    const categoryId = CATEGORIES[category] || CATEGORIES.general;\n    const difficultyLevel = DIFFICULTY_LEVELS[difficulty] || DIFFICULTY_LEVELS.medium;\n    const params = new URLSearchParams({\n      amount: amount.toString(),\n      category: categoryId.toString(),\n      difficulty: difficultyLevel,\n      type: 'multiple'\n    });\n    const response = await fetch(`${API_BASE_URL}?${params}`, {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.json();\n    if (data.response_code !== 0) {\n      throw new Error(`API error: ${data.response_code}`);\n    }\n    if (!data.results || data.results.length === 0) {\n      throw new Error('No questions found');\n    }\n    return data.results.map(normalizeQuestion);\n  } catch (error) {\n    console.warn('API request failed, using fallback questions:', error.message);\n\n    // Use fallback questions if API fails\n    const fallbackCategory = category === 'science' ? 'science' : 'general';\n    const fallbackQuestions = FALLBACK_QUESTIONS[fallbackCategory] || FALLBACK_QUESTIONS.general;\n\n    // Filter by difficulty if possible\n    const filteredQuestions = fallbackQuestions.filter(q => difficulty === 'any' || q.difficulty === difficulty);\n    if (filteredQuestions.length === 0) {\n      return fallbackQuestions.slice(0, amount);\n    }\n    return shuffleArray(filteredQuestions).slice(0, amount).map(normalizeQuestion);\n  }\n};\n\n// Get available categories\nexport const getCategories = () => {\n  return Object.keys(CATEGORIES).map(key => ({\n    id: key,\n    name: key.replace(/_/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase()),\n    apiId: CATEGORIES[key]\n  }));\n};\n\n// Get difficulty levels\nexport const getDifficultyLevels = () => {\n  return Object.keys(DIFFICULTY_LEVELS).map(key => ({\n    id: key,\n    name: key.charAt(0).toUpperCase() + key.slice(1)\n  }));\n};\n\n// Validate question data\nexport const validateQuestion = question => {\n  return question && question.question && question.correct_answer && question.incorrect_answers && Array.isArray(question.incorrect_answers) && question.incorrect_answers.length >= 3;\n};\n\n// Calculate quiz statistics\nexport const calculateQuizStats = (questions, answers) => {\n  const totalQuestions = questions.length;\n  const answeredQuestions = answers.length;\n  const correctAnswers = answers.filter(answer => answer.isCorrect).length;\n  const accuracy = answeredQuestions > 0 ? correctAnswers / answeredQuestions * 100 : 0;\n  const averageTime = answers.length > 0 ? answers.reduce((sum, answer) => sum + (answer.timeSpent || 0), 0) / answers.length : 0;\n  return {\n    totalQuestions,\n    answeredQuestions,\n    correctAnswers,\n    accuracy: Math.round(accuracy * 100) / 100,\n    averageTime: Math.round(averageTime * 100) / 100,\n    score: correctAnswers,\n    percentage: Math.round(correctAnswers / totalQuestions * 100)\n  };\n};","map":{"version":3,"names":["API_BASE_URL","CATEGORIES","DIFFICULTY_LEVELS","FALLBACK_QUESTIONS","general","question","correct_answer","incorrect_answers","category","difficulty","type","science","decodeHtml","html","txt","document","createElement","innerHTML","value","shuffleArray","array","shuffled","i","length","j","Math","floor","random","normalizeQuestion","answers","map","fetchQuestions","amount","categoryId","difficultyLevel","medium","params","URLSearchParams","toString","response","fetch","method","headers","ok","Error","status","data","json","response_code","results","error","console","warn","message","fallbackCategory","fallbackQuestions","filteredQuestions","filter","q","slice","getCategories","Object","keys","key","id","name","replace","l","toUpperCase","apiId","getDifficultyLevels","charAt","validateQuestion","Array","isArray","calculateQuizStats","questions","totalQuestions","answeredQuestions","correctAnswers","answer","isCorrect","accuracy","averageTime","reduce","sum","timeSpent","round","score","percentage"],"sources":["C:/Users/samma/OneDrive/Desktop/New folder (4)/src/services/quizApi.js"],"sourcesContent":["// Open Trivia DB API configuration\r\nconst API_BASE_URL = 'https://opentdb.com/api.php';\r\nconst CATEGORIES = {\r\n  'general': 9,\r\n  'books': 10,\r\n  'film': 11,\r\n  'music': 12,\r\n  'musicals': 13,\r\n  'television': 14,\r\n  'video_games': 15,\r\n  'board_games': 16,\r\n  'science_nature': 17,\r\n  'science_computers': 18,\r\n  'science_mathematics': 19,\r\n  'mythology': 20,\r\n  'sports': 21,\r\n  'geography': 22,\r\n  'history': 23,\r\n  'politics': 24,\r\n  'art': 25,\r\n  'celebrities': 26,\r\n  'animals': 27,\r\n  'vehicles': 28,\r\n  'comics': 29,\r\n  'science_gadgets': 30,\r\n  'anime_manga': 31,\r\n  'cartoon_animation': 32\r\n};\r\n\r\nconst DIFFICULTY_LEVELS = {\r\n  'easy': 'easy',\r\n  'medium': 'medium',\r\n  'hard': 'hard'\r\n};\r\n\r\n// Fallback questions for offline mode\r\nconst FALLBACK_QUESTIONS = {\r\n  general: [\r\n    {\r\n      question: \"What is the capital of France?\",\r\n      correct_answer: \"Paris\",\r\n      incorrect_answers: [\"London\", \"Berlin\", \"Madrid\"],\r\n      category: \"Geography\",\r\n      difficulty: \"easy\",\r\n      type: \"multiple\"\r\n    },\r\n    {\r\n      question: \"Which planet is known as the Red Planet?\",\r\n      correct_answer: \"Mars\",\r\n      incorrect_answers: [\"Venus\", \"Jupiter\", \"Saturn\"],\r\n      category: \"Science\",\r\n      difficulty: \"easy\",\r\n      type: \"multiple\"\r\n    },\r\n    {\r\n      question: \"Who painted the Mona Lisa?\",\r\n      correct_answer: \"Leonardo da Vinci\",\r\n      incorrect_answers: [\"Pablo Picasso\", \"Vincent van Gogh\", \"Michelangelo\"],\r\n      category: \"Art\",\r\n      difficulty: \"medium\",\r\n      type: \"multiple\"\r\n    },\r\n    {\r\n      question: \"What is the largest mammal in the world?\",\r\n      correct_answer: \"Blue whale\",\r\n      incorrect_answers: [\"African elephant\", \"Giraffe\", \"Hippopotamus\"],\r\n      category: \"Science\",\r\n      difficulty: \"easy\",\r\n      type: \"multiple\"\r\n    },\r\n    {\r\n      question: \"In which year did World War II end?\",\r\n      correct_answer: \"1945\",\r\n      incorrect_answers: [\"1944\", \"1946\", \"1947\"],\r\n      category: \"History\",\r\n      difficulty: \"medium\",\r\n      type: \"multiple\"\r\n    }\r\n  ],\r\n  science: [\r\n    {\r\n      question: \"What is the chemical symbol for gold?\",\r\n      correct_answer: \"Au\",\r\n      incorrect_answers: [\"Go\", \"Gd\", \"Ag\"],\r\n      category: \"Science\",\r\n      difficulty: \"medium\",\r\n      type: \"multiple\"\r\n    },\r\n    {\r\n      question: \"What is the speed of light in vacuum?\",\r\n      correct_answer: \"299,792,458 m/s\",\r\n      incorrect_answers: [\"300,000,000 m/s\", \"299,000,000 m/s\", \"301,000,000 m/s\"],\r\n      category: \"Science\",\r\n      difficulty: \"hard\",\r\n      type: \"multiple\"\r\n    },\r\n    {\r\n      question: \"What is the smallest unit of matter?\",\r\n      correct_answer: \"Atom\",\r\n      incorrect_answers: [\"Molecule\", \"Cell\", \"Particle\"],\r\n      category: \"Science\",\r\n      difficulty: \"easy\",\r\n      type: \"multiple\"\r\n    },\r\n    {\r\n      question: \"What gas makes up most of Earth's atmosphere?\",\r\n      correct_answer: \"Nitrogen\",\r\n      incorrect_answers: [\"Oxygen\", \"Carbon dioxide\", \"Argon\"],\r\n      category: \"Science\",\r\n      difficulty: \"medium\",\r\n      type: \"multiple\"\r\n    },\r\n    {\r\n      question: \"What is the powerhouse of the cell?\",\r\n      correct_answer: \"Mitochondria\",\r\n      incorrect_answers: [\"Nucleus\", \"Ribosome\", \"Chloroplast\"],\r\n      category: \"Science\",\r\n      difficulty: \"medium\",\r\n      type: \"multiple\"\r\n    }\r\n  ]\r\n};\r\n\r\n// Utility function to decode HTML entities\r\nconst decodeHtml = (html) => {\r\n  const txt = document.createElement('textarea');\r\n  txt.innerHTML = html;\r\n  return txt.value;\r\n};\r\n\r\n// Utility function to shuffle array\r\nconst shuffleArray = (array) => {\r\n  const shuffled = [...array];\r\n  for (let i = shuffled.length - 1; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * (i + 1));\r\n    [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];\r\n  }\r\n  return shuffled;\r\n};\r\n\r\n// Normalize question data from API\r\nconst normalizeQuestion = (question) => {\r\n  const answers = shuffleArray([\r\n    question.correct_answer,\r\n    ...question.incorrect_answers\r\n  ]);\r\n  \r\n  return {\r\n    ...question,\r\n    question: decodeHtml(question.question),\r\n    correct_answer: decodeHtml(question.correct_answer),\r\n    incorrect_answers: question.incorrect_answers.map(decodeHtml),\r\n    answers: answers.map(decodeHtml),\r\n    category: decodeHtml(question.category),\r\n    difficulty: question.difficulty\r\n  };\r\n};\r\n\r\n// Fetch questions from Open Trivia DB API\r\nexport const fetchQuestions = async (category = 'general', difficulty = 'medium', amount = 10) => {\r\n  try {\r\n    const categoryId = CATEGORIES[category] || CATEGORIES.general;\r\n    const difficultyLevel = DIFFICULTY_LEVELS[difficulty] || DIFFICULTY_LEVELS.medium;\r\n    \r\n    const params = new URLSearchParams({\r\n      amount: amount.toString(),\r\n      category: categoryId.toString(),\r\n      difficulty: difficultyLevel,\r\n      type: 'multiple'\r\n    });\r\n    \r\n    const response = await fetch(`${API_BASE_URL}?${params}`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Accept': 'application/json',\r\n      },\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n    \r\n    const data = await response.json();\r\n    \r\n    if (data.response_code !== 0) {\r\n      throw new Error(`API error: ${data.response_code}`);\r\n    }\r\n    \r\n    if (!data.results || data.results.length === 0) {\r\n      throw new Error('No questions found');\r\n    }\r\n    \r\n    return data.results.map(normalizeQuestion);\r\n    \r\n  } catch (error) {\r\n    console.warn('API request failed, using fallback questions:', error.message);\r\n    \r\n    // Use fallback questions if API fails\r\n    const fallbackCategory = category === 'science' ? 'science' : 'general';\r\n    const fallbackQuestions = FALLBACK_QUESTIONS[fallbackCategory] || FALLBACK_QUESTIONS.general;\r\n    \r\n    // Filter by difficulty if possible\r\n    const filteredQuestions = fallbackQuestions.filter(q => \r\n      difficulty === 'any' || q.difficulty === difficulty\r\n    );\r\n    \r\n    if (filteredQuestions.length === 0) {\r\n      return fallbackQuestions.slice(0, amount);\r\n    }\r\n    \r\n    return shuffleArray(filteredQuestions).slice(0, amount).map(normalizeQuestion);\r\n  }\r\n};\r\n\r\n// Get available categories\r\nexport const getCategories = () => {\r\n  return Object.keys(CATEGORIES).map(key => ({\r\n    id: key,\r\n    name: key.replace(/_/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase()),\r\n    apiId: CATEGORIES[key]\r\n  }));\r\n};\r\n\r\n// Get difficulty levels\r\nexport const getDifficultyLevels = () => {\r\n  return Object.keys(DIFFICULTY_LEVELS).map(key => ({\r\n    id: key,\r\n    name: key.charAt(0).toUpperCase() + key.slice(1)\r\n  }));\r\n};\r\n\r\n// Validate question data\r\nexport const validateQuestion = (question) => {\r\n  return (\r\n    question &&\r\n    question.question &&\r\n    question.correct_answer &&\r\n    question.incorrect_answers &&\r\n    Array.isArray(question.incorrect_answers) &&\r\n    question.incorrect_answers.length >= 3\r\n  );\r\n};\r\n\r\n// Calculate quiz statistics\r\nexport const calculateQuizStats = (questions, answers) => {\r\n  const totalQuestions = questions.length;\r\n  const answeredQuestions = answers.length;\r\n  const correctAnswers = answers.filter(answer => answer.isCorrect).length;\r\n  const accuracy = answeredQuestions > 0 ? (correctAnswers / answeredQuestions) * 100 : 0;\r\n  const averageTime = answers.length > 0 \r\n    ? answers.reduce((sum, answer) => sum + (answer.timeSpent || 0), 0) / answers.length \r\n    : 0;\r\n  \r\n  return {\r\n    totalQuestions,\r\n    answeredQuestions,\r\n    correctAnswers,\r\n    accuracy: Math.round(accuracy * 100) / 100,\r\n    averageTime: Math.round(averageTime * 100) / 100,\r\n    score: correctAnswers,\r\n    percentage: Math.round((correctAnswers / totalQuestions) * 100)\r\n  };\r\n};\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}